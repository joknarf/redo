# redo bash command history
# Author : Franck Jouvanceau
#
_get_hist()
{
  typeset _hist
  [ "$BASH" ] && {
    _hist="$( (fc -lnr -0 -1000) )" # missing last cmd without subshell on bash <4.4
    [ "$_hist" ] || _hist="$(fc -lnr -1000)" # bug bash <4.4 with multiline last command
  }
  [ "$ZSH_VERSION" ] && _hist=$(printf "\t %s\n" "${history[@]}")
  printf "%s" "$_hist"| awk '
      BEGIN{ done[""]=1 }
      $0 in done {next}
      {done[$0]=1;sub("\n$","");gsub("\n",ret);print $0}
    ' RS="\n*+\t " ret='↵ '  
}

_redo_del()
{
  typeset todel="$1" i _hist
  [ "$todel" ] || return
  _hist="$( (fc -lr -0 -1000) )" # missing last cmd without subshell on bash <4.4
  [ "$_hist" ] || _hist="$(fc -lr -1000)" # bug bash <4.4 with multiline last command
  for i in $(printf "%s" "$_hist"| awk '
        {sub("\n$","");gsub("\n",ret)}
        $0==todel {gsub("^\n|\t $","",prevrt);print prevrt }
        {prevrt=RT}
      ' RS="\n*[0-9]+\t " ret='↵ ' todel="${todel//\\/\\\\}")
  do
    history -d $i
  done
  awk '{
    gsub(ret,"\n",todel)
    print todel >"/tmp/tod"
    while (ind = index($0, todel)) {
      print(substr($0, 1, ind))
      $0 = substr($0, ind+length(todel))
    }
  }1' ret='↵ ' RS='\003' ORS='' todel="\n${todel//\\/\\\\}\n" ${HISTFILE:=~/.bash_history} >~/.bash_history.tmp && mv ~/.bash_history.tmp ${HISTFILE:=~/.bash_history} 
}

redodel()
{
  tput cuu1 >&2
  selector -p redodel -m 10 -d _redo_del -i "$(_get_hist)"
}

_redo_selector()
{
  typeset _redo _hist
  tput el >&2
  printf "%s\n" "$1" >&2
  _redo="$(selector -p redo -m 10 -d _redo_del -i "$(_get_hist |grep "$1")" || printf "%s" "$1")"
  printf "%s" "$_redo" | awk '{gsub(ret,"\n")}1' ret='↵ '
  tput cuu1 >&2
}

_redow() {
  BUFFER=$(_redo_selector "$BUFFER")
  zle -Rc
  zle end-of-line
  zle vi-insert
}

_redo_completions()
{
  [ ${#COMP_WORDS[@]} -gt 2 ] && return
  printf "\r" >&2
  COMPREPLY="$(_redo_selector "${COMP_WORDS[1]}")"
  kill -WINCH $$
  [ ! "${COMPREPLY[0]}" ] && COMPREPLY=()
}

_redo_binds()
{
  typeset redo_bind
  [ -t 1 ] || return
  [[ ! -o emacs ]] && [[ ! -o vi ]] && set -o emacs
  [ "$BASH" ] && {
    bind -m vi-insert '"\C-xr": redraw-current-line'
    bind -m vi-insert '"\C-xx": shell-expand-line'
    bind -m vi-insert '"\C-xk": backward-kill-line'
    bind -m vi-insert '"\C-xs": character-search'
    bind -m vi-insert '"\C-xe": kill-line'
    bind -m vi-insert '"\C-xm": set-mark'
    bind -m vi-insert '"\C-xc": exchange-point-and-mark'
    # safe param quoting (but take only current line until first simple quote)
    # prevent expansion in filter / bell ring
    # - append simple quote to line
    # - add "." begin of line return begin of line
    # - search simple quote
    # - mark position
    # - delete first character "." added
    # - exchange mark
    # - add character "." before simple quote (for kill ring if empty)
    # - cut before simple quote
    # - paste in param, remove last character added
    # - cut end of line
    # - expand line
    bind_redo='\eA'"'"'\eI.\eI\C-xs'"'"'\C-xm\e0xi\C-xc\ei.\C-xk\"$(_redo_selector '"'"'\C-y\C-h'"'"')\"\C-xe\eI\C-xx\eA\C-xr'
    bind -m vi-insert '"\C-r": "'"$bind_redo"'"'
    # version not taking parameter from current command line:
    #bind -m vi-insert '"\C-r": "\C-xd$(_redo_selector)\e0i\C-xx\C-xr"'
    
    #bind -m vi-insert '"\ex": "'"$bind_redo"'"'
    bind -m vi-insert '"\e/": "'"$bind_redo"'"'
    bind -m vi-command '"/": "'"A$bind_redo"'"'

    bind -m emacs-standard '"\C-xr": redraw-current-line'
    bind -m emacs-standard '"\C-xx": shell-expand-line'
    bind -m emacs-standard '"\C-xk": backward-kill-line'
    bind -m emacs-standard '"\C-xs": character-search'
    #bind -m emacs-standard '"\C-xb": character-search-backward'
    bind -m emacs-standard '"\C-xd": delete-char'
    bind -m emacs-standard '"\C-xm": set-mark'
    bind -m emacs-standard '"\C-xc": exchange-point-and-mark'
    # \C-a beginning-of-line
    # \C-e end-of-line
    # \C-k kill-line
    # safe param quoting (takes only current line until first simple quote)

    bind -m emacs-standard '"\C-r": "\C-e'"'"'\C-a.\C-a\C-xs'"'"'\C-xm\C-a\C-xd\C-xc\C-b.\C-xk$(_redo_selector '"'"'\C-y\C-h'"'"')\C-k\C-a\C-xx\C-e\C-xr"'  
    bind -m emacs-standard '"\ex": "\C-r"'
    bind -m emacs-standard '"\e/": "\C-r"'
  }
  [ "$ZSH_VERSION" ] && {
      zle -N _redow
      bindkey -M vicmd '/' _redow
      bindkey -M viins '^r' _redow
      bindkey -M emacs '\e/' _redow
      bindkey -M emacs '^r' _redow
  }
}

redo()
{
    "$@"
}

_redo_binds
[ "$BASH" ] && complete -F _redo_completions redo

# selector from https://ghithub.com/joknarf/selector

# no proper way to restore tty on trap
function _ctrl_c
{
  tput ich 16
  printf "(Ctl-X to exit)\r"
}

function _menuprompt
{
  typeset form filter="${3:-${_aitems[$_nsel]}}" nb="$_nsel/$2 " pl=""
  printf "\r"
  #form="$1: %s%s"
  [ "$_powerline" = "y" ] && pl=""
  form="\e[30m\e[44m\e[97m $1 \e[0m\e[34m\e[44m\e[100m$pl\e[97m %s\e[0m\e[90m\e[100m\e[49m$pl\e[0m %s"
  printf "$form" "$nb" "$filter"
  tput el
  printf "\r"
}

function _showmenu 
{
  typeset prompt="$1" nsel="$2" nbitems="$3" filter="$4" item i min max sel lines

  _menuprompt "$prompt" "$nbitems" "$filter"
  w=$nbitems;w=${#w}
  lines=${_maxlines:-$LINES}
  [ $lines -gt $LINES ] && lines=$LINES
  min=$(($nsel-$lines+2))
  [ "$min" -le 0 ] && min=1
  max=$(($min+$lines-2))
  i=0
  sel="\n\e[30m\e[46m\e[97m %${w}s \e[0m\e[1;96m %s\e[0m"
  [ "$_powerline" = y ] && sel="\n\e[30m\e[46m\e[97m %${w}s \e[0m\e[36m\e[46m\e[49m\e[0m\e[1;96m%s\e[0m"
  while [ $i -lt $nbitems ]
  do
    i=$((i + 1))
    item="${_aitems[$i]}"
    [[ $i -ge $min ]] || continue
    [[ $i -le $max ]] || break
    if [[ $nsel == "$i" ]]; then 
      printf "$sel" $i "$item"
    else
      printf "\n\e[32m %${w}s  \e[94m%s\e[0m" $i "$item"
    fi
    tput el #clear end of line
  done
  size=$((nbitems+1))
  [ "$size" -gt $lines ] && size=$lines
  # back to top of menu
  i=1;while [ $i -lt $size ];do
    echo cuu1
    i=$((i + 1))
  done | tput -S
  printf "\r" # begin of line
}

function _select
{
  typeset prompt="$1" newsel="$2" nbitems="$3" filter="$4" lines

  lines=${_maxlines:-$LINES}
  [ $lines -gt $LINES ] && lines=$LINES
  _nsel=$(($newsel))
  [ $_nsel -lt 1 ] && _nsel=1
  [ $_nsel -ge $nbitems ] && _nsel=$nbitems
  _showmenu "$prompt" "$_nsel" "$nbitems" "$filter"
}

function _items_split
{
  typeset filter="$1" i=1 item

  [ "$filter" ] && {
    _nsel=""
    [[ "$filter" =~ ^[0-9]+$ ]] && _nsel=$filter || _items="$(printf "%s" "$_items" |grep -- "$filter" 2>/dev/null|uniq)"
  }
  [ "$_nsel" ] && _items="${_aitems[$_nsel]}"
  _nsel=1
  unset _aitems
  while IFS= read -r item;do
    _aitems[$i]="$item"
    i=$((i+1))
  done <<EOT
$_items
EOT
}

function _readkey
{
    typeset o=${1:-n} k
    IFS= read -rs${o}1 key
    [ "$key" = $'\x1b' ] && key="" && while true
    do
      k=""
      read -rs${o}1 -t 0.001 k 2>/dev/null
      [ $? = 1 ] && [ ! "$ZSH_VERSION" ] && read -rs${o}1 -t 1 k # old bash
      [ ! "$k" ] && key=${key:-$'\x1b'} && break
      key+="$k"
      case "$key" in
      '['[A-H]|'['*'~'|O[A-S]|'[1;2'[P-S]) break;;  
      esac
    done
    printf "%s" "$key"
}

function _domenu 
{
  typeset prompt="$1" filter="$2" nbitems o=n

  printf "\r"
  tput el
  [ "$ZSH_VERSION" ] && o=k
  _items_split "$filter"
  [ "$_items" ] || return 1
  nbitems=${#_aitems[@]}
  [ "$nbitems" = 1 ] && {
    selected="${_aitems[1]}"
    unset _nsel
    return 0
  }
  _items_ori="$_items"
  filter=""
  tput civis
  stty -echo 2>/dev/null
  printf "\e[?7l" # nowrap
  : ${LINES:=$(tput lines)}
  [ "$_maxlines" -gt 2 ] || unset _maxlines
  _showmenu "$prompt" "$_nsel" "$nbitems" ""
  while true
  do
    k=$(_readkey $o)
    case $k in
      '[A'|OA) #up
        filter="";_select "$prompt" "_nsel-1" "$nbitems" "$filter";;
      '[B'|OB) #down
        filter="";_select "$prompt" "_nsel+1" "$nbitems" "$filter";;
      '[H'|'[D'|OD) #home or arrowleft
        filter="";_select "$prompt" "1" "$nbitems" "$filter";;
      '[F'|'[C'|OC) #end or arrowright
        filter="";_select "$prompt" "nbitems" "$nbitems" "$filter";;
      '[6~'|$'\x06') #pagedn Ctl-F
        filter="";_select "$prompt" "_nsel+lines-1" "$nbitems" "$filter";;
      '[5~'|$'\x02') #pageup Ctl-B
        filter="";_select "$prompt" "_nsel-lines+1" "$nbitems" "$filter";;
      '[19~'|$'\x04') # F8 Ctl-D delete
        [ "$_delfunc" ] && $_delfunc "${_aitems[$_nsel]}"
        unset "_aitems[$_nsel]"
        [ "$BASH" ] && _aitems=(_ "${_aitems[@]}") && unset '_aitems[0]' ||\
          _aitems=("${(@)_aitems[1,$_nsel-1]}" "${(@)_aitems[$_nsel+1,$nbitems]}")
        nbitems=${#_aitems[@]}
        tput ed
        filter="";_select "$prompt" "$_nsel" "$nbitems" "$filter";;
      $'\x7f') #backspace
        filter=${filter%?}
        _items="$_items_ori"
        _nsel=""
        _items_split "$filter"
        nbitems=${#_aitems[@]}
        [ $_autofilter = y ] && _showmenu "$prompt" "$_nsel" "$nbitems" "$filter" || \
          _menuprompt "$prompt" "$nbitems" "$filter"
        ;;
      $'\xf8') #meta (macos)
        break;;
      [[:graph:]]|" ") #text [a-zA-Z0-9/_?*\(\)\ .-]) 
        filter="$filter$k"
        [ "$_autofilter" = y ] && [[ ! "$filter" =~ ^[0-9]+$ ]] && {
          _items_split "$filter"
          [ ! "$_items" ] && {
            printf "Not found !"
            tput el
            read -rs${o}4 -t 0.5 k 2>/dev/null
            _items="$_items_ori"
            filter="${filter%?}"
            _nsel=""
            _items_split "$filter"
          }
          nbitems=${#_aitems[@]}
          tput ed
          _showmenu "$prompt" "$_nsel" "$nbitems" "$filter"
        }
        _menuprompt "$prompt" "$nbitems" "$filter";;
      $'\x0c') # Ctl-L => refresh
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      $'\x01') # Ctl-A => all
        unset _maxlines
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      $'\x05') # Ctl-E purge
      echo "=>";sleep 0.5
        selected="${_aitems[$_nsel]}"
        _purge=1
        break;;
      $'\x0d'|''|$'\n') # enter
        [[ "$filter" =~ ^[0-9]+$ ]] && selected="${_aitems[$filter]}" || selected="${_aitems[$_nsel]}"
        break;;     
      $'\t') # tab
        _items_split "$filter"
        [ ! "$_items" ] && break
        nbitems=${#_aitems[@]}
        [ $nbitems = 1 ] && selected="${_aitems[1]}" && break
        _items_ori="$_items"
        filter=""
        tput ed
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      *) printf "%s" "$k" >/tmp/o;break;
    esac
  done
  unset _nsel
  unset _aitems
  unset _items_ori
  printf "\e[?7h" #wrap
  tput ed
  tput cnorm
}

function selector
{
  typeset prompt filter
  prompt="select"
  selected=""
  _maxlines=0
  _autofilter=y
  _powerline=y
  _delfunc=""
  while [ $# -gt 0 ]; do
    case "$1" in
      -p|--prompt)
        [ "$2" ] && prompt="$2" || return 1
        ;;
      -i|--items)
        [ "$2" ] && _items="$2" || return 1
        ;;
      -f|--file)
        [ "$2" ] && _items="$(cat $2)" || return 1
        ;;
      -m|--max)
        [ "$2" ] && _maxlines="$(($2+1))" || return 1
        ;;
      -P|--powerline)
        [ "$2" ] && _powerline="$2" || return 1
        ;;
      -F|--filter)
        [ "$2" ] && filter="$2" || return 1
        ;;
      -a|--autofilter)
        [ "$2" ] && _autofilter="$2" || return 1
        ;;
      -d|--deletefunc)
        [ "$2" ] && _delfunc="$2" || return 1
        ;;
      *)
        printf "usage: selector [-p <prompt>] -i <items>|-f <itemfile> [-P <y|n>]\n"
        printf "args :\n"
        printf "%s\n" "  -p, --prompt          menu prompt"
        printf "%s\n" "  -i, --items           menu items \n separated"
        printf "%s\n" "  -f, --file            file with items"
        printf "%s\n" "  -F, --filter          regexp pattern filter items"
        printf "%s\n" "  -P, --powerline       y or n, powerline symbol usage"
        return 1
        ;;
    esac
    shift 2
  done
  _stty_ori=$(stty -g 2>/dev/null)
  _purge=""
  trap _ctrl_c INT
  LC_ALL=$__selector_lc _domenu "$prompt" "$filter" >&2
  trap - INT
  stty $_stty_ori 2>/dev/null
  unset _items
  unset _maxlines
  unset _autofilter
  [ "$selected" ] && {
    printf "%s" "$selected"
    [ "$_purge" ] && return 111
    return 0
  }
  return 1
}

[[ "$LANG" = *UTF-8 ]] && __selector_lc="$LANG" || {
    type locale >/dev/null 2>/dev/null && locale -a |grep -iq "en_US.UTF-*8" && __selector_lc=en_US.UTF-8 || __selector_lc=C.UTF-8
}