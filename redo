# redo bash command history
# Author : Franck Jouvanceau
#

type tac >/dev/null 2>&1 || alias tac='tail -r'

_redo_selector()
{
  tput el >&2
  printf "$1\n" >&2  
  selector -p redo -m 10 -i "$(fc -n -l -1000|\
      sed -e $'s/^\t redo /\t /' -e 's/ *$//' |\
      tac|awk '
        BEGIN{ done["\t"]=1 }
        $0 in done {next}
        $0 ~ "^\t .*"{done[$0]=1;print $0}
      ' |grep "$1")"
  tput cuu1 >&2
}

_redo_completions()
{
  [ ${#COMP_WORDS[@]} -gt 2 ] && return
  printf "\r" >&2
  COMPREPLY="$(_redo_selector "${COMP_WORDS[1]}")"
  kill -WINCH $$
  [ ! "${COMPREPLY[0]}" ] && COMPREPLY=()
}

_redo_binds()
{
  [ "$(uname -s)" = Darwin ] && _redo_lc="LC_ALL=C " || _redo_lc=""

  bind "set convert-meta on"

  bind -m vi-insert '"\C-xr": redraw-current-line'
  bind -m vi-insert '"\C-xx": shell-expand-line'
  bind -m vi-insert '"\C-xk": backward-kill-line'
  bind -m vi-insert '"\C-xs": character-search'
  bind -m vi-insert '"\C-xb": character-search-backward'
  bind -m vi-insert '"\C-xe": kill-line'
  bind -m vi-insert '"\C-xd": kill-whole-line'
  # safe param quoting (but take only current line until first simple quote)
  # prevent expansion in filter
  # - append simple quote to line
  # - search from begin of line the simple quote
  # - cut before simple quote
  # - paste in param
  # - cut after
  # - expand line
  bind -m vi-insert '"\C-r": "\eA'"'"'\e0i\C-xs'"'"'\C-xb'"'"'.\C-xk$('"$_redo_lc"'_redo_selector '"'"'\C-y\C-h'"'"')\C-xe\e0i\C-xx\eA\C-xr"'
  #bind -m vi-insert '"\C-r": "\C-xd$('"$_redo_lc"'_redo_selector)\e0i\C-xx\C-xr"'
  bind -m vi-insert '"\ex": "\C-r"'
  bind -m vi-insert '"\e/": "\C-r"'
  bind -m vi-command '"/": "a\C-r"'

  bind -m emacs-standard '"\C-xr": redraw-current-line'
  bind -m emacs-standard '"\C-xx": shell-expand-line'
  bind -m emacs-standard '"\C-xk": backward-kill-line'
  bind -m emacs-standard '"\C-xs": character-search'
  bind -m emacs-standard '"\C-xb": character-search-backward'
  bind -m emacs-standard '"\C-xd": delete-char'
  # \C-a beginning-of-line
  # \C-e end-of-line
  # \C-k kill-line
  # safe param quoting (takes only current line until first simple quote)
  bind -m emacs-standard '"\C-r": "\C-e'"'"'\C-a\C-xs'"'"'\C-xb'"'"'.\C-xk$('"$_redo_lc"'_redo_selector '"'"'\C-y\C-h'"'"')\C-k\C-a\C-xx\C-e\C-xr"'
  bind -m emacs-standard '"\ex": "\C-r"'
  bind -m emacs-standard '"\e/": "\C-r"'

  unset _redo_lc
}

redo()
{
    "$@"
}

_redo_binds
complete -F _redo_completions redo

# selector from https://ghithub.com/joknarf/selector

# no proper way to restore tty on trap
function _ctrl_c
{
  tput ich 16
  printf "(Ctl-X to exit)\r"
}

function _menuprompt
{
  typeset form filter=${3:-${_aitems[$_nsel]}} nb="$_nsel/$2 "
  [ "$3" ] && nb=""
  printf "\r"
  form="$1: %s%s"
  [ "$_powerline" = "y" ] && {
    [ "$3" ] && form="\e[30m\e[44m\e[97m $1 \e[0m\e[34m\e[44m\e[49m\e[0m %s%s" || \
                form="\e[30m\e[44m\e[97m $1 \e[0m\e[34m\e[44m\e[100m\e[97m %s\e[0m\e[90m\e[100m\e[49m\e[0m %s"
  }
  printf "$form" "$nb" "$filter"
  tput el
  printf "\r"
}

function _showmenu 
{
  typeset prompt="$1" nsel="$2" nbitems="$3" filter="$4" item i min max sel lines

  _menuprompt "$prompt" "$nbitems" "$filter"
  w=$nbitems;w=${#w}
  lines=${_maxlines:-$LINES}
  [ $lines -gt $LINES ] && lines=$LINES
  min=$(($nsel-$lines+2))
  [ "$min" -le 0 ] && min=1
  max=$(($min+$lines-2))
  i=0
  sel="\n\e[30m\e[46m\e[97m %${w}s \e[0m\e[1;96m %s\e[0m"
  [ "$_powerline" = y ] && sel="\n\e[30m\e[46m\e[97m %${w}s \e[0m\e[36m\e[46m\e[49m\e[0m\e[1;96m%s\e[0m"
  while [ $i -lt $nbitems ]
  do
    i=$((i + 1))
    item="${_aitems[$i]}"
    [[ $i -ge $min ]] || continue
    [[ $i -le $max ]] || break
    if [[ $nsel == "$i" ]]; then 
      printf "$sel" $i "$item"
    else
      printf "\n\e[32m %${w}s  \e[94m%s\e[0m" $i "$item"
    fi
    tput el #clear end of line
  done
  size=$((nbitems+1))
  [ "$size" -gt $lines ] && size=$lines
  # back to top of menu
  i=1;while [ $i -lt $size ];do
    echo cuu1
    i=$((i + 1))
  done | tput -S
  printf "\r" # begin of line
}

function _select
{
  typeset prompt="$1" newsel="$2" nbitems="$3" filter="$4" lines

  lines=${_maxlines:-$LINES}
  [ $lines -gt $LINES ] && lines=$LINES
  _nsel=$(($newsel))
  [ $_nsel -lt 1 ] && _nsel=1
  [ $_nsel -ge $nbitems ] && _nsel=$nbitems
  _showmenu "$prompt" "$_nsel" "$nbitems" "$filter"
}

function _items_split
{
  typeset filter="$1" i=1 item

  [ "$filter" ] && {
    _nsel=""
    [[ "$filter" =~ ^[0-9]+$ ]] && _nsel=$filter || _items="$(printf "%s" "$_items" |grep -- "$filter"|uniq)"
  }
  [ "$_nsel" ] && _items="${_aitems[$_nsel]}"
  _nsel=1
  unset _aitems
  while read -r item;do
    _aitems[$i]="$item"
    i=$((i+1))
  done <<EOT
$_items
EOT
}

function _domenu 
{
  typeset prompt="$1" filter="$2" nbitems o=n

  printf "\r"
  tput el
  [ "$ZSH_VERSION" ] && o=k
  _items_split "$filter"
  [ "$_items" ] || return 1
  nbitems=${#_aitems[@]}
  [ "$nbitems" = 1 ] && {
    selected="${_aitems[1]}"
    unset _nsel
    return 0
  }
  _items_ori="$_items"
  filter=""
  tput civis
  stty -echo
  printf "\e[?7l"
  : ${LINES:=$(tput lines)}
  [ "$_maxlines" -gt 2 ] || unset _maxlines
  _showmenu "$prompt" "$_nsel" "$nbitems" ""
  while true
  do
    IFS= read -rs${o}1 k
    case $k in
      $'\x1b')
          filter=""
          read -rs${o}2 -t.001 k 2>/dev/null
          [ $? = 1 ] && read -rs${o}2 -t1 k
          case $k in 
            '[A') #up
              _select "$prompt" "_nsel-1" "$nbitems" "$filter";;
            '[B') #down
              _select "$prompt" "_nsel+1" "$nbitems" "$filter";;
            '[H'|'[D') #home or arrowleft
              _select "$prompt" "1" "$nbitems" "$filter";;
            '[F'|'[C') #end or arrowright
              _select "$prompt" "nbitems" "$nbitems" "$filter";;
            '[6') #pagedn [6~
              read -rs${o}1 -t.001 k 2>/dev/null
              [ $? = 1 ] && read -rs${o}1 -t1 k
              _select "$prompt" "_nsel+lines-1" "$nbitems" "$filter";;
            '[5') #pageup [5~
              read -rs${o}1 -t.001 k 2>/dev/null
              [ $? = 1 ] && read -rs${o}1 -t1 k
              _select "$prompt" "_nsel-lines+1" "$nbitems" "$filter";;
            *) break;;
          esac;;
      $'\x7f') #backspace
        filter=${filter%?}
        _items="$_items_ori"
        _nsel=""
        _items_split "$filter"
        nbitems=${#_aitems[@]}
        [ $_autofilter = y ] && _showmenu "$prompt" "$_nsel" "$nbitems" "$filter" || \
          _menuprompt "$prompt" "$nbitems" "$filter"
        ;;
      $'\xf8') #meta (macos)
        break;;
      [[:graph:]]|" ") #text [a-zA-Z0-9/_?*\(\)\ .-]) 
        filter="$filter$k"
        [ "$_autofilter" = y ] && [[ ! "$filter" =~ ^[0-9]+$ ]] && {
          _items_split "$filter"
          [ ! "$_items" ] && {
            printf "Not found !"
            tput el
            read -rs${o}4 -t.5 k 2>/dev/null
            _items="$_items_ori"
            filter="${filter%?}"
            _nsel=""
            _items_split "$filter"
          }
          nbitems=${#_aitems[@]}
          tput ed
          _showmenu "$prompt" "$_nsel" "$nbitems" "$filter"
        }
        _menuprompt "$prompt" "$nbitems" "$filter";;
      $'\x06') # Ctl-F => pgdn
        _select "$prompt" "_nsel+lines-1" "$nbitems" "$filter";;
      $'\x02') # Ctl-B => pgup
        _select "$prompt" "_nsel-lines+1" "$nbitems" "$filter";;
      $'\x0c') # Ctl-L => refresh
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      $'\x01') # Ctl-A => all
        unset _maxlines
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      $'\x0d'|''|$'\n') # enter
        [[ "$filter" =~ ^[0-9]+$ ]] && selected="${_aitems[$filter]}" || selected="${_aitems[$_nsel]}"
        break;;     
      $'\t') # tab
        _items_split "$filter"
        [ ! "$_items" ] && break
        nbitems=${#_aitems[@]}
        [ $nbitems = 1 ] && selected="${_aitems[1]}" && break
        _items_ori="$_items"
        filter=""
        tput ed
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      *) break;
    esac
  done
  unset _nsel
  unset _aitems
  unset _items_ori
  tput ed
  tput cnorm
}

function selector
{
  typeset prompt filter
  prompt="select"
  selected=""
  _maxlines=0
  _autofilter=y
  _powerline=y
  while [ $# -gt 0 ]; do
    case "$1" in
      -p|--prompt)
        [ "$2" ] && prompt="$2" || return 1
        ;;
      -i|--items)
        [ "$2" ] && _items="$2" || return 1
        ;;
      -f|--file)
        [ "$2" ] && _items="$(cat $2)" || return 1
        ;;
      -m|--max)
        [ "$2" ] && _maxlines="$(($2+1))" || return 1
        ;;
      -P|--powerline)
        [ "$2" ] && _powerline="$2" || return 1
        ;;
      -F|--filter)
        [ "$2" ] && filter="$2" || return 1
        ;;
      -a|--autofilter)
        [ "$2" ] && _autofilter="$2" || return 1
        ;;
      *)
        printf "usage: selector [-p <prompt>] -i <items>|-f <itemfile> [-P <y|n>]\n"
        printf "args :\n"
        printf "%s\n" "  -p, --prompt          menu prompt"
        printf "%s\n" "  -i, --items           menu items \n separated"
        printf "%s\n" "  -f, --file            file with items"
        printf "%s\n" "  -F, --filter          regexp pattern filter items"
        printf "%s\n" "  -P, --powerline       y or n, powerline symbol usage"
        return 1
        ;;
    esac
    shift 2
  done
  _stty_ori=$(stty -g)
  trap _ctrl_c INT
  _domenu "$prompt" "$filter" >&2
  trap - INT
  stty $_stty_ori
  unset _items
  unset _maxlines
  unset _autofilter
  [ "$selected" ] && printf "%s" "$selected" && return 0
  return 1
}
